---
swagger: "2.0"
info:
  description: "Goboard API"
  version: "1.0.0"
  title: "Goboard"
  contact: {}
host: {{ .Hostname }}
basePath: {{ .PathPrefix }}
schemes:
  - {{ .Scheme }}
consumes:
  - "application/xml"
  - "application/json"
  - "text/tsv"
  - "text/xml"
  - "text/plain"
produces:
  - "application/xml"
  - "application/json"
  - "text/tsv"
  - "text/xml"
  - "text/plain"
paths:
  /backend/{format}:
    get:
      tags:
        - "Backend"
      summary: "Returns the backend in specified format"
      description: "Returns the backend (the post history)\n"
      produces:
        - "text/xml"
        - "application/xml"
        - "application/json"
        - "text/tsv"
        - "text/plain"
      parameters:
        - name: "last"
          in: "query"
          required: false
          type: "number"
          description: "Last id known by the client."
        - name: "Accept"
          in: "header"
          required: false
          type: "string"
          enum:
            - "application/xml"
            - "text/xml"
            - "application/json"
            - "text/tsv"
      responses:
        200:
          description: "An XML/JSON/TSV document with backend data"
          schema:
            $ref: "#/definitions/Board"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Error message"
    parameters:
      - name: "format"
        in: "path"
        required: true
        type: "string"
        description: "Desired output format"
        enum:
          - "xml"
          - "json"
          - "tsv"
  /post:
    post:
      tags:
        - "Backend"
      summary: "Post a new message"
      description: "Post a new message\n"
      consumes:
        - "multipart/form-data"
      produces:
        - "text/plain"
      parameters:
        - name: "Cookie"
          in: "header"
          required: false
          type: "string"
          description: "Authentification cookie."
        - name: "message"
          in: "formData"
          required: true
          type: "string"
          description: "Message to post"
      responses:
        204:
          description: "Message stored"
          headers:
            X-Post-Id:
              type: "integer"
              format: "int64"
              description: "id of the message"
        400:
          description: "Request contains some errors"
          schema:
            type: "string"
            description: "Error message"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Error message"
  /post/{id}/{format}:
    get:
      tags:
        - "Backend"
      summary: "Get a post with a specified format"
      description: "If format is empty, it is equivalent to calling /post/{id}"
      produces:
        - "application/xml"
        - "application/json"
        - "text/tsv"
        - "text/xml"
        - "text/plain"
      parameters:
        - name: "Accept"
          in: "header"
          required: false
          type: "string"
          enum:
            - "application/xml"
            - "text/xml"
            - "application/json"
            - "text/tsv"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Post"
        404:
          description: "Status 404"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Error message"
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "format"
        in: "path"
        required: false
        type: "string"
        enum:
          - "xml"
          - "json"
          - "tsv"
  /user/add:
    post:
      tags:
        - "User"
      summary: "Add a new user"
      description: "Add a new user\n"
      consumes:
        - "multipart/form-data"
      produces:
        - "text/plain"
      parameters:
        - name: "user"
          in: "formData"
          required: true
          type: "string"
          description: "User's login"
        - name: "password"
          in: "formData"
          required: true
          type: "string"
          description: "User's password"
      responses:
        200:
          description: "User created"
          headers:
            Set-Cookie:
              type: "string"
              description: "Authenticated user's cookie"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
          examples:
            text/plain: "Error message"
  /user/login:
    post:
      tags:
        - "User"
      summary: "Authenticate a user"
      description:
        "Authenticate a user\n\nuser and password form params must be set\
        \ and not empty\n"
      consumes:
        - "multipart/form-data"
      produces:
        - "text/plain"
      parameters:
        - name: "login"
          in: "formData"
          required: true
          type: "string"
          description: "User's login"
        - name: "password"
          in: "formData"
          required: true
          type: "string"
          description: "User's password"
      responses:
        200:
          description: "User logged in"
          headers:
            Set-Cookie:
              type: "string"
              description: "Authenticated user's cookie"
        400:
          description:
            "Some invalid parameters were sent (usually empty login or\
            \ password)"
          schema:
            type: "string"
            description: "Error message"
          examples:
            text/plain: "Login can't be empty"
        401:
          description: "Authentication failed"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Error message"
  /user/logout:
    get:
      tags:
        - "User"
      summary: "Logout a user"
      parameters:
        - name: "Cookie"
          in: "header"
          required: false
          type: "string"
          description: "authenticated user cookie"
      responses:
        204:
          description: "Status 204"
          headers:
            Set-Cookie:
              type: "string"
              description: "Expired cookie"
  /user/whoami:
    get:
      tags:
        - "User"
      summary: "Returns current user info"
      produces:
        - "application/json"
        - "text/plain"
      parameters:
        - name: "Cookie"
          in: "header"
          required: true
          type: "string"
          description: "Authenticated used cookie"
      responses:
        200:
          description: "Valid cookie"
          schema:
            $ref: "#/definitions/User"
        403:
          description: "No cookie or invalid cookie"
          schema:
            type: "string"
        500:
          description: "Some internal error happened"
          schema:
            type: "string"
            description: "Error message"
  /admin/user/{login}:
    get:
      tags:
        - "Admin"
      summary: "Get user infos"
      produces:
        - "application/json"
        - "text/plain"
      parameters:
        - name: "Token-Id"
          in: "header"
          required: true
          type: "string"
          description: "Admin token."
      responses:
        200:
          description: "User infos associated with login"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Login not found"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Error message"
    delete:
      tags:
        - "Admin"
      summary: "Deletes a user"
      description: "Deletes a user by it's login\n"
      produces:
        - "text/plain"
      parameters:
        - name: "Token-Id"
          in: "header"
          required: true
          type: "string"
          description: "Admin token."
      responses:
        200:
          description: "Message deleted"
        401:
          description: "Wrong, Empty or no Token-Id was send"
        404:
          description: "Send post id doesn't exists"
          schema:
            type: "string"
            description: "User not found message"
          examples:
            text/plain: "User <login> Not found"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Returns error message"
    parameters:
      - name: "login"
        in: "path"
        required: true
        type: "string"
  /admin/post/{id}:
    delete:
      tags:
        - "Admin"
      summary: "Deletes a post"
      description: "Deletes a post by it's id\n"
      produces:
        - "text/plain"
      parameters:
        - name: "Token-Id"
          in: "header"
          required: true
          type: "string"
          description: "Admin token."
      responses:
        200:
          description: "Post deleted"
        401:
          description: "Wrong, Empty or no Token-Id was send"
        404:
          description: "Post id not found"
          schema:
            type: "string"
            description: "Post id not found message"
          examples:
            text/plain: "Post <id> Not found"
        500:
          description: "An internal error happened"
          schema:
            type: "string"
            description: "Error message"
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
definitions:
  Board:
    type: "object"
    required:
      - "posts"
      - "site"
    properties:
      site:
        type: "string"
      posts:
        type: "array"
        items:
          $ref: "#/definitions/Post"
  Post:
    type: "object"
    required:
      - "id"
      - "info"
      - "login"
      - "message"
      - "time"
    properties:
      time:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      info:
        type: "string"
      message:
        type: "string"
      login:
        type: "string"
  User:
    type: "object"
    properties:
      Login:
        type: "string"
      CreationDate:
        type: "string"
        format: "date-time"
