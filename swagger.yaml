---
swagger: "2.0"
info:
  description: "Goboard API"
  version: "1.0.0"
  title: "Goboard"
  contact: {}
host: "localhost:8080"
basePath: "/"
schemes:
- "http"
paths:
  /backend/{format}:
    get:
      tags:
      - "Backend"
      summary: "Returns the backend in specified format"
      description: "Returns the backend (the post history)\n"
      produces:
      - "text/xml"
      - "application/xml"
      - "application/json"
      - "text/tsv"
      parameters:
      - name: "last"
        in: "query"
        required: false
        type: "number"
        description: "Last id known by the client."
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        enum:
        - "application/xml"
        - "text/xml"
        - "application/json"
        - "text/tsv"
      responses:
        200:
          description: "An XML/JSON/TSV document with backend data"
          schema:
            $ref: "#/definitions/Board"
    parameters:
    - name: "format"
      in: "path"
      required: true
      type: "string"
      description: "Desired output format"
      enum:
      - "xml"
      - "json"
      - "tsv"
  /post:
    post:
      tags:
      - "Backend"
      summary: "Post a new message"
      description: "Post a new message\n"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "Cookie"
        in: "header"
        required: false
        type: "string"
        description: "Authentification cookie."
      - name: "message"
        in: "formData"
        required: true
        type: "string"
        description: "Message to post"
      responses:
        200:
          description: "Message stored"
          headers:
            X-Post-Id:
              type: "integer"
              format: "int64"
              description: "id of the message"
  /user/add:
    post:
      tags:
      - "User"
      summary: "Add a new user"
      description: "Add a new user\n"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "user"
        in: "formData"
        required: true
        type: "string"
        description: "User's login"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
        description: "User's password"
      responses:
        200:
          description: "User created"
          headers:
            Set-Cookie:
              type: "string"
              description: "Authenticated user's cookie"
  /user/login:
    post:
      tags:
      - "User"
      summary: "Authenticate a user"
      description: "Authenticate a user\n"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "user"
        in: "formData"
        required: true
        type: "string"
        description: "User's login"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
        description: "User's password"
      responses:
        200:
          description: "User logged in"
          headers:
            Set-Cookie:
              type: "string"
              description: "Authenticated user's cookie"
        401:
          description: "Authentication failed"
  /admin/user/{login}:
    get:
      tags:
      - "Admin"
      summary: "Get user infos"
      produces:
      - "application/json"
      parameters:
      - name: "Token-Id"
        in: "header"
        required: true
        type: "string"
        description: "Admin token."
      responses:
        200:
          description: "User infos associated with login"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Login not found"
    delete:
      tags:
      - "Admin"
      summary: "Deletes a user"
      description: "Deletes a user by it's login\n"
      parameters:
      - name: "Token-Id"
        in: "header"
        required: true
        type: "string"
        description: "Admin token."
      responses:
        200:
          description: "Message deleted"
        404:
          description: "Status 404"
    parameters:
    - name: "login"
      in: "path"
      required: true
      type: "string"
  /admin/post/{id}:
    delete:
      tags:
      - "Admin"
      summary: "Deletes a post"
      description: "Deletes a post by it's id\n"
      parameters:
      - name: "Token-Id"
        in: "header"
        required: true
        type: "string"
        description: "Admin token."
      responses:
        200:
          description: "Post deleted"
        404:
          description: "Id not found"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /post/{id}/{format}:
    get:
      tags:
      - "Backend"
      summary: "Get a post with a specified format"
      description: "If format is empty, it is equivalent to calling /post/{id}"
      produces: []
      parameters:
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
        enum:
        - "application/xml"
        - "text/xml"
        - "application/json"
        - "text/tsv"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Post"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
    - name: "format"
      in: "path"
      required: true
      type: "string"
      enum:
      - "xml"
      - "json"
      - "tsv"
  /user/logout:
    get:
      tags:
      - "User"
      summary: "Logout a user"
      parameters:
      - name: "Cookie"
        in: "header"
        required: false
        type: "string"
        description: "authenticated user cookie"
      responses:
        200:
          description: "Status 200"
          headers:
            Set-Cookie:
              type: "string"
              description: "Expired cookie"
  /user/whoami:
    get:
      tags:
      - "User"
      summary: "Returns current user info"
      produces:
      - "text/plain"
      parameters:
      - name: "Cookie"
        in: "header"
        required: true
        type: "string"
        description: "Authenticated used cookie"
      responses:
        200:
          description: "Valid cookie"
          schema:
            $ref: "#/definitions/User"
        403:
          description: "No cookie or invalid cookie"
          schema:
            type: "string"
definitions:
  Board:
    type: "object"
    properties:
      site:
        type: "string"
      posts:
        type: "array"
        items:
          $ref: "#/definitions/Post"
  Post:
    type: "object"
    properties:
      time:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      info:
        type: "string"
      message:
        type: "string"
      login:
        type: "string"
  User:
    type: "object"
    properties:
      Login:
        type: "string"
      CreationDate:
        type: "string"
        format: "date-time"
